Architectural debt is a form of technical debt that derives from the gap between the architectural
design of the system as it "should be" compared to "as it is". We measured architecture debt in two
ways: 1) in terms of system-wide coupling measures, and 2) in terms of the number and severity of architectural
flaws. In recent work it was shown that the amount of architectural debt has a huge impact on software
maintainability and evolution. Consequently, detecting and reducing the debt is expected to make
software more amenable to change. This paper reports on a longitudinal study of a healthcare communications
product created by Brightsquid Secure Communications Corp. This start-up company is facing the
typical trade-off problem of desiring responsiveness to change requests, but wanting to avoid
the ever-increasing effort that the accumulation of quick-and-dirty changes eventually incurs.
In the first stage of the study, we analyzed the status of the "before" system, which indicated the
impacts of change requests. This initial study motivated a more in-depth analysis of architectural
debt. The results of this analysis were used to motivate a comprehensive refactoring of the software
system. The third phase of the study was a follow-on architectural debt analysis which quantified
the improvements made. Using this quantitative evidence, augmented by qualitative evidence gathered
from in-depth interviews with Brightsquid's architects, we present lessons learned about the
costs and benefits of paying down architecture debt in practice. 