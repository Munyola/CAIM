Non-volatile memory (NVM) promises persistent main memory that remains correct despite loss of
power. This has sparked a line of research into algorithms that can recover from a system crash. Since
caches are expected to remain volatile, concurrent data structures and algorithms must be redesigned
to guarantee that they are left in a consistent state after a system crash, and that the execution
can be continued upon recovery. However, the prospect of redesigning every concurrent data structure
or algorithm before it can be used in NVM architectures is daunting. In this paper, we present a construction
that takes any concurrent program with reads, writes and CASs to shared memory and makes it persistent,
i.e., can be continued after one or more processes fault and have to restart. Importantly the converted
algorithm has constant computational delay (preserves instruction counts on each process within
a constant factor), as well as constant recovery delay (a process can recover from a fault in a constant
number of instructions). We show this first for a simple transformation, and then present optimizations
to make it more practical, allowing for a tradeoff for better constant factors in computational
delay, for sometimes increased recovery delay. We also provide an optimized transformation that
works for any normalized lock-free data structure, thus allowing more efficient constructions
for a large class of concurrent algorithms. We experimentally evaluate our transformations by
applying them to a queue. 