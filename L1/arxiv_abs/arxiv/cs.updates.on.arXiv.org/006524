Liquid typing provides a decidable refinement inference mechanism that is convenient but subject
to two major issues: (1) inference is global and requires top-level annotations, making it unsuitable
for inference of modular code components and prohibiting its applicability to library code, and
(2) inference failure results in obscure error messages. These difficulties seriously hamper
the migration of existing code to use refinements. This paper shows that gradual liquid type inference---a
novel combination of liquid inference and gradual refinement types---addresses both issues.
Gradual refinement types, which support imprecise predicates that are optimistically interpreted,
can be used in argument positions to constrain liquid inference so that the global inference process
e effectively infers modular specifications usable for library components. Dually, when gradual
refinements appear as the result of inference, they signal an inconsistency in the use of static
refinements. Because liquid refinements are drawn from a nite set of predicates, in gradual liquid
type inference we can enumerate the safe concretizations of each imprecise refinement, i.e. the
static refinements that justify why a program is gradually well-typed. This enumeration is useful
for static liquid type error explanation, since the safe concretizations exhibit all the potential
inconsistencies that lead to static type errors. We develop the theory of gradual liquid type inference
and explore its pragmatics in the setting of Liquid Haskell. 