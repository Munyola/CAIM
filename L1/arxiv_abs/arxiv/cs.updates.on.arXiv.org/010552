Programming digital contracts comes with unique challenges, which include expressing and enforcing
protocols of interaction, controlling resource usage, and tracking linear assets. This article
presents the type-theoretic foundation of Nomos, a programming language for digital contracts
whose type system addresses the aforementioned domain-specific requirements. To express and
enforce protocols, Nomos is based on shared binary session types rooted in linear logic. To control
resource usage, Nomos uses resource-aware session types and automatic amortized resource analysis,
a type-based technique for inferring resource bounds. To track linear assets, Nomos employs a linear
type system that prevents assets from being duplicated or discarded. The technical contribution
is the design and soundness proof of Nomos' type system, which integrates shared session types and
resource-aware session types with a functional type system that supports automatic amortized
resource analysis. To evaluate Nomos' viability for digital contract development, we include
a case study of several blockchain applications and demonstrate how their vulnerabilities do not
arise in corresponding Nomos applications. In particular, Nomos ensures that synthetic tokens
implement their technical standard and prevents vulnerabilities due to violations of linearity,
out-of-gas exceptions, or dependence on transaction ordering. To evaluate Nomos' session-based
design, we report on the performance of three digital contracts implemented in an existing prototype
language. 