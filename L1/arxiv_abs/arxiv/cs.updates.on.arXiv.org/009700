In recent years, mesh subdivision---the process of forging smooth free-form surfaces from coarse
polygonal meshes---has become an indispensable production instrument. Although subdivision
performance is crucial during simulation, animation and rendering, state-of-the-art approaches
still rely on serial implementations for complex parts of the subdivision process. Therefore,
they often fail to harness the power of modern parallel devices, like the graphics processing unit
(GPU), for large parts of the algorithm and must resort to time-consuming serial preprocessing.
In this paper, we show that a complete parallelization of the subdivision process for modern architectures
is possible. Building on sparse matrix linear algebra, we show how to structure the complete subdivision
process into a sequence of algebra operations. By restructuring and grouping these operations,
we adapt the process for different use cases, such as regular subdivision of dynamic meshes, uniform
subdivision for immutable topology, and feature-adaptive subdivision for efficient rendering
of animated models. As the same machinery is used for all use cases, identical subdivision results
are achieved in all parts of the production pipeline. As a second contribution, we show how these
linear algebra formulations can effectively be translated into efficient GPU kernels. Applying
our strategies to $\sqrt{3}$, Loop and Catmull-Clark subdivision shows significant speedups
of our approach compared to state-of-the-art solutions, while we completely avoid serial preprocessing.
