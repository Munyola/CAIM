Context: Security smells are coding patterns in source code that are indicative of security weaknesses.
As infrastructure as code (IaC) scripts are used to provision cloud-based servers and systems at
scale, security smells in IaC scripts could be used to enable malicious users to exploit vulnerabilities
in the provisioned systems. Goal: The goal of this paper is to help practitioners avoid insecure
coding practices while developing infrastructure as code (IaC) scripts through an empirical study
of security smells in IaC scripts. Methodology: We apply qualitative analysis with 3,339 IaC scripts
to identify security smells for IaC scripts written in three languages: Ansible, Chef, and Puppet.
We construct a static analysis tool called Security Linter for Infrastructure as Code scripts (SLIC)
to automatically identify security smells in 61,097 scripts collected from 1,093 open source software
repositories. We also submit bug reports for 1,500 randomly-selected smell occurrences identified
from the 61,097 scripts. Results: We identify nine security smells for IaC scripts. By applying
SLIC on 61,097 IaC scripts we identify 64,356 occurrences of security smells that included 9,092
hard-coded passwords. We observe agreement for 130 of the responded 187 bug reports, which suggests
the relevance of security smells for IaC scripts amongst practitioners. Conclusion: We observe
security smells to be prevalent in IaC scripts. We recommend practitioners to rigorously inspect
the presence of the identified security smells in IaC scripts using (i) code review, and (ii) static
analysis tools. 