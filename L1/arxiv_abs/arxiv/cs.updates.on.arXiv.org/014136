Behavior modeling and software architecture specification are attracting more attention in software
engineering. Describing both of them in integrated models yields numerous advantages for coping
with complexity since the models are platform independent. They can be decomposed to be developed
independently by experts of the respective fields, and they are highly reusable and may be subjected
to formal analysis. Typically, behavior is defined as the occurrence of an action, a pattern over
time, or any change in or movement of an object. In systems studies, there are many different approaches
to modeling behavior, such as grounding behavior simultaneously on state transitions, natural
language, and flowcharts. These different descriptions make it difficult to compare objects with
each other for consistency. This paper attempts to propose some conceptual preliminaries to a definition
of behavior in software engineering. The main objective is to clarify the research area concerned
with system behavior aspects and to create a common platform for future research. Five generic elementary
processes (creating, processing, releasing, receiving, and transferring) are used to form a unifying
higher-order process called a thinging machine (TM) that is utilized as a template in modeling behavior
of systems. Additionally, a TM includes memory and triggering relations among stages of processes
(machines). A TM is applied to many examples from the literature to examine their behavioristic
aspects. The results show that a TM is a valuable tool for analyzing and modeling behavior in a system.
