In the modern era of multicore processors, utilizing multiple cores properly is a tedious job. Synchronization
and communication among processors involve high cost. Software transaction memory systems (STMs)
addresses this issues and provide better concurrency in which programmer need not have to worry
about consistency issues. Several big-data applications which deal large amounts of data can benefit
from Transactional Memory Systems. In this paper, we introduce a new STM system as multi-version
object based STM (MV-OSTM) which is the fusion of object based STM with multiple versions. As the
name suggests MV-OSTM, works on a higher level and keeping the multiple versions corresponding
to each key. Presently, we have developed MV-OSTM with the unlimited number of versions corresponding
to each key. To overcome traversal overhead, it performs the garbage collection method to delete
the unwanted versions corresponding to the key. It provides greater concurrency while reducing
the number of aborts. It ensures composability by making the transaction as atomic. In the proposed
algorithm, $k$ is the input parameter and the value of it will be decided by the programmer and depends
on the application. Programmer can tune the value of $k$ from 1 to $\infty$. If k equal to 1 then it will
boil down to single version object based STM (OSTM) and if k equal to $\infty$ then it will be equivalent
to multi-version OSTM with $\infty$ versions. MV-OSTM satisfies correctness-criteria as opacity.
For a given version order of keys, if any history H generated by MV-OSTM produces acyclic graph then
$H$ is opaque. 