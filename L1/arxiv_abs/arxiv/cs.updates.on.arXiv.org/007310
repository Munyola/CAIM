Multiple logic-based reconstruction of conceptual data modelling languages such as EER, UML Class
Diagrams, and ORM exists. They mainly cover various fragments of the languages and none are formalised
such that the logic applies simultaneously for all three modelling language families as unifying
mechanism. This hampers interchangeability, interoperability, and tooling support. In addition,
due to the lack of a systematic design process of the logic used for the formalisation, hidden choices
permeate the formalisations that have rendered them incompatible. We aim to address these problems,
first, by structuring the logic design process in a methodological way. We generalise and extend
the DSL design process to apply to logic language design more generally and, in particular, by incorporating
an ontological analysis of language features in the process. Second, availing of this extended
process, of evidence gathered of language feature usage, and of computational complexity insights
from Description Logics (DL), we specify logic profiles taking into account the ontological commitments
embedded in the languages. The profiles characterise the minimum logic structure needed to handle
the semantics of conceptual models, enabling the development of interoperability tools. There
is no known DL language that matches exactly the features of those profiles and the common core is
small (in the tractable $\mathcal{ALNI}$). Although hardly any inconsistencies can be derived
with the profiles, it is promising for scalable runtime use of conceptual data models. 