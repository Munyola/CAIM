We propose a new formal criterion for secure compilation, giving strong end-to-end security guarantees
for software components written in unsafe, low-level languages with C-style undefined behavior.
Our criterion is the first to model_dynamic_ compromise in a system of mutually distrustful components
running with least privilege. Each component is protected from all the others---in particular,
from components that have encountered undefined behavior and become compromised. Each component
receives secure compilation guarantees up to the point when it becomes compromised, after which
an attacker can take complete control over the component and use any of its privileges to attack the
remaining uncompromised components. More precisely, we ensure that dynamically compromised
components cannot break the safety properties of the system at the target level any more than equally
privileged components without undefined behavior already could in the source language. To illustrate
this model, we build a secure compilation chain for an unsafe language with buffers, procedures,
and components. We compile it to a simple RISC abstract machine with built-in compartmentalization
and provide thorough proofs, many of them machine-checked in Coq, showing that the compiler satisfies
our secure compilation criterion. Finally, we show that the protection guarantees offered by the
compartmentalized abstract machine can be achieved at the machine-code level using either software
fault isolation or a tag-based reference monitor. 